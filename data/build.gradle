apply plugin: 'com.android.library'
apply plugin: 'com.fernandocejas.frodo'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {

    defaultConfig {

        multiDexEnabled true

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {

            buildConfigField "Long", "DATABASE_SCHEMA_VERSION", "0L"
        }

        release {

            buildConfigField "Long", "DATABASE_SCHEMA_VERSION", "0L"

            minifyEnabled false
            // shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'),
                    rootProject.file('tools/proguard/rules-proguard.pro')
        }
    }

    lintOptions {

        abortOnError false
    }
}

// Show test status in console.
tasks.withType(Test) {

    testLogging {
        events "passed", "failed"
    }
}

dependencies {

    api fileTree(dir: 'libs', include: ['*.jar'])

    api project(':domain')

    def androidLibs = [
            appCompat: [group: 'com.android.support', name: 'appcompat-v7', version: androidSDKVersion]
    ]

    def libs = [
            converterGson: [group: 'com.squareup.retrofit2', name: 'converter-gson', version: retrofitVersion],
            dagger: [group: 'com.google.dagger', name: 'dagger', version: daggerVersion],
            daggerCompiler: [group: 'com.google.dagger', name: 'dagger-compiler', version: daggerVersion],
            gson: [group: 'com.google.code.gson', name: 'gson', version: gsonVersion],
            javaxAnnotation: [group: 'javax.annotation', name: 'jsr250-api', version: javaxAnnotationVersion],
            kotlin: [group: 'org.jetbrains.kotlin', name: 'kotlin-stdlib', version: kotlinVersion],
            kotlinReflect: [group: 'org.jetbrains.kotlin', name: 'kotlin-reflect', version: kotlinVersion],
            retrofit: [group: 'com.squareup.retrofit2', name: 'retrofit', version: retrofitVersion],
            retrofitRxJava2Adapter: [group: 'com.squareup.retrofit2', name: 'adapter-rxjava2', version: retrofitVersion],
            rxjava2: [group: 'io.reactivex.rxjava2', name: 'rxjava', version: rxjava2Version]
    ]

    def testLibs = [
            espresso: [group: 'com.android.support.test.espresso', name: 'espresso-core', version: espressoVersion],
            junit: [group: 'junit', name: 'junit', version: junitVersion],
            kotlinUnitTest: [group: 'org.jetbrains.kotlin', name: 'kotlin-test-junit', version: kotlinVersion],
            mockitoKotlin: [group: 'com.nhaarman', name: 'mockito-kotlin', version: mockitoKotlinVersion],
            mockWebServer: [group: 'com.squareup.okhttp3', name: 'mockwebserver', version: mockWebServerVersion]
    ]

    def appDependencies = [
            [configuration: 'api', dependency: androidLibs.appCompat],

            [configuration: 'api', dependency: libs.converterGson],
            [configuration: 'api', dependency: libs.dagger],
            [configuration: 'kapt', dependency: libs.daggerCompiler],
            [configuration: 'api', dependency: libs.gson],
            [configuration: 'compileOnly', dependency: libs.javaxAnnotation],
            [configuration: 'api', dependency: libs.kotlin],
            [configuration: 'api', dependency: libs.kotlinReflect],
            [configuration: 'api', dependency: libs.retrofit],
            [configuration: 'api', dependency: libs.retrofitRxJava2Adapter],
            [configuration: 'api', dependency: libs.rxjava2],

            [configuration: 'androidTestImplementation', dependency: testLibs.espresso, options:
                    { exclude group: 'com.android.support', module: 'support-annotations' }],
            [configuration: 'testImplementation', dependency: testLibs.junit],
            [configuration: 'testImplementation', dependency: testLibs.kotlinUnitTest],
            [configuration: 'testImplementation', dependency: testLibs.mockitoKotlin, options:
                    { exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib' }],
            [configuration: 'testImplementation', dependency: testLibs.mockWebServer]
    ]

    appDependencies.each {
        add(it.configuration, it.dependency, it.options)
    }
}

apply from: "${rootProject.getRootDir()}/android.gradle"